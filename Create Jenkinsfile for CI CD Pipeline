Create a Jenkinsfile in your repository to define the CI/CD pipeline:

pipeline {
agent any
// Specify the maven installation to use for this pipeline.
// 'maven3' refers to a Maven installation configured in Jenkins.
tools {
maven 'maven3'
}
stages {
stage('Checkout') {
steps {
echo 'Cloning GIT HUB Repo'
// Clone the specified branch from the GitHub repository
git branch: 'main', url: 'https://github.com/devopstraininghub/mindcircuit13.git'
}
}
stage('SonarQube Scan') {
steps {
echo 'Scanning project'
// List directory contents for debugging purposes
sh 'ls -ltr'
// Run SonarQube scan with specified SonarQube server and login token
sh ''' mvn sonar:sonar \\
-Dsonar.host.url=http://100.26.227.191:9000 \\
-Dsonar.login=squ_19733ad4e43d54992ef61923b91447e2d17a3062'''
}
}
stage('Build Artifact') {
steps {
echo 'Build Artifact'
// Clean and package the project using Maven
sh 'mvn clean package'
}
}
stage('Build Docker Image') {
steps {
echo 'Build Docker Image'
// Build the Docker image using the Dockerfile in the project
// Tag the image with the current build number
sh 'docker build -t devopshubg333/batch13:${BUILD_NUMBER} .'
}
}
stage('Push to Docker Hub') {
steps {
script {
// Use Dockerhub credentials to access Docker Hub
withCredentials([string(credentialsId: 'dockerhub', variable: 'dockerhub')]) {
sh 'docker login -u devopshubg333 -p ${dockerhub}'
}
// Push the Docker image to Docker Hub
sh 'docker push devopshubg333/batch13:${BUILD_NUMBER}'
echo 'Pushed to Docker Hub'
}
}
}
stage('Update Deployment File') {
environment {
GIT_REPO_NAME = "mindcircuit13"
GIT_USER_NAME = "devopstraininghub"
}
steps {
echo 'Update Deployment File'
// Use Githubtoken to access GitHub
withCredentials([string(credentialsId: 'githubtocken', variable: 'githubtoken')]) {
sh '''
// Configure git user
git config user.email "madhuxxxx123@gmail.com"
git config user.name "Madhu"
// Replace the tag in the deployment YAML file with the current build
number
sed -i "s/batch13:.*/batch13:${BUILD_NUMBER}/g"
deploymentfiles/deployment.yml
// Stage all changes
git add .
// Commit changes with a message containing the build number
git commit -m "Update deployment image to version ${BUILD_NUMBER}"
// Push changes to the main branch of the GitHub repository
git push
https://${githubtoken}@github.com/${GIT_USER_NAME}/${GIT_REPO_NAME}
HEAD:main
'''
}
}
}
}
}




Explanation of Each Stage

1. Checkout
 Clones the main branch of the specified GitHub repository to the Jenkins
workspace.

2. SonarQube Scan
 Lists the directory contents to ensure files are in place.
 Runs a SonarQube scan using Maven to analyze the code for bugs, vulnerabilities,
and code smells. The scan results are sent to the specified SonarQube server.

3. Build Artifact
 Cleans the workspace and packages the Maven project, creating a build artifact
(typically a JAR or WAR file).

4. Build Docker Image
 Builds a Docker image from the Dockerfile in the project directory.
 Tags the Docker image with the Jenkins build number for versioning.

5. Push to Docker Hub
 Logs into Docker Hub using credentials stored in Jenkins.
 Pushes the Docker image to the Docker Hub repository.
6. Update Deployment File
 Configures git user details for committing changes.
 Updates the deployment YAML file to use the newly created Docker image with
the current build number.
 Stages, commits, and pushes the updated deployment file back to the GitHub
repository, ensuring the Kubernetes cluster can pull the latest image.
